-
  description: Basic usage
  code: >
    <div style={{ width: 240 }}>
      <Select
        options={[
          { label: 'Option 1', value: 1 },
          { label: 'Option 2', value: 2 },
          { label: 'Option 3', value: 3 },
          { label: 'Option 4', value: 4 },
          { label: 'Option 5', value: 5 },
          { label: 'Option 6', value: 6 },
          { label: 'Option 7', value: 7 },
          { label: 'Option 8', value: 8 },
          { label: 'Option 9', value: 9 },
        ]}
      />
    </div>

-
  description: Creating options
  code: >
    <div style={{ width: 240 }}>
      <Select
        canCreate={true}
        options={[
          { label: 'Option 1', value: 1 },
          { label: 'Option 2', value: 2 },
          { label: 'Option 3', value: 3 },
        ]}
      />
    </div>

-
  description: Non-searchable
  code: >
    <div style={{ width: 240 }}>
      <Select
        options={[
          { label: 'Option 1', value: 1 },
          { label: 'Option 2', value: 2 },
          { label: 'Option 3', value: 3 },
          { label: 'Option 4', value: 4 },
          { label: 'Option 5', value: 5 },
          { label: 'Option 6', value: 6 },
        ]}
        searchable={false}
      />
    </div>

-
  description: Clearable
  code: >
    <div style={{ width: 240 }}>
      <Select
        clearable={true}
        options={[
          { label: 'Option 1', value: 1 },
          { label: 'Option 2', value: 2 },
          { label: 'Option 3', value: 3 },
          { label: 'Option 4', value: 4 },
          { label: 'Option 5', value: 5 },
          { label: 'Option 6', value: 6 },
        ]}
      />
    </div>

-
  description: Disabled
  code: >
    <div style={{ width: 240 }}>
      <Select
        disabled={true}
        options={[
          { label: 'Option 1', value: 1 },
          { label: 'Option 2', value: 2 },
          { label: 'Option 3', value: 3 },
          { label: 'Option 4', value: 4 },
          { label: 'Option 5', value: 5 },
          { label: 'Option 6', value: 6 },
        ]}
        value={2}
      />
    </div>

-
  description: |
    Fully customizable selector. Try emptying the `PROJECTS` array
    or removing the `UNASSIGNED` option.

  inline: false
  code: >
    // Probably this would be injected by some global state handler.

    const PROJECTS = [
      { label: 'Project 1', value: 1, code: '1' },
      { label: 'Project 2', value: 2, code: '2' },
      { label: 'Project 3', value: 3, code: '3' },
      { label: 'Project 4', value: 4, code: '4' },
      { label: 'Project 5', value: 5, code: '5' },
      { label: 'Project 6', value: 6, code: '6' },
      { label: 'No Project', value: 123456, code: 'UNASSIGNED' },
    ]

    class ProjectSelect extends React.PureComponent {
      emptyRenderer = ({ search }) => {
        let view

        if (search) {
          view = (
            <div>
              <div style={{ fontSize: '1.1em', marginBottom: 8 }}>
                No results for <b>"{search}"</b>
              </div>
              <div style={{ color: '#aaa' }}>
                Click the button below to create a new project
              </div>
            </div>
          )
        }
        else {
          view = (
            <div>
              <div style={{ fontSize: '1.1em', marginBottom: 8 }}>
                You don't have any projects
              </div>
              <div style={{ color: '#aaa' }}>
                Write the name to create a new project
              </div>
            </div>
          )
        }

        return (
          <div
            className="Select__emptyView"
            style={{
              paddingTop: 32,
              paddingBottom: 32,
            }}
            >
            {view}
          </div>
        )
      }

      render() {
        // Custom clear logic
        const unassignOption = PROJECTS.find(option =>
          option.code === 'UNASSIGNED'
        )
        const isClearable = !!unassignOption

        return (
          <Select
            canCreate={true}
            clearable={isClearable}
            clearText="Leave without project"
            clearValue={isClearable ? unassignOption.value : null}
            createOptionLabel="Create new project"
            emptyRenderer={this.emptyRenderer}
            inputPlaceholder="Write to search or create projects"
            options={PROJECTS}
            placeholder="Select a project"
            {...this.props}
          />
        )
      }
    }


    ReactDOM.render(
      <div style={{ width: 320 }}>
        <ProjectSelect onChange={console.log} />
      </div>
    , mountNode)

-
  description: Render performance.

  inline: false
  code: >
    const optionsToCreate = 10000

    const options = []

    for (let i = 1; i <= optionsToCreate; i++) {
      options.push({
        label: `Option ${i}`,
        value: i,
      })
    }

    ReactDOM.render(
      <div style={{ width: 320 }}>
        <Select options={options} />
      </div>
    , mountNode)

