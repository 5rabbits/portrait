-
  description: Selectable options list.
  code: >
    <Selectable
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          options,
          setValue,
          value,
        }) =>
          <div>
            <div className="selectable-dropdown">
              {options.map(option =>
                <button
                  className={classNames('selectable-dropdown__option', {
                    'selectable-dropdown__option--selected': value === option.value,
                  })}
                  key={option.value}
                  onClick={() => setValue(option.value)}
                  type="button"
                  >
                  {option.label}
                </button>
              )}
            </div>
            <div className="current-value">
              Current value: {value}
            </div>
          </div>
      }
    />

-
  description: Adds a search input.
  code: >
    <Selectable
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          getSearchMatches,
          options,
          search,
          setSearch,
          setValue,
          value,
        }) =>
          <div>
            <div className="selectable-dropdown">
              <div className="selectable-dropdown__searchWrapper">
                <input
                  className="selectable-dropdown__searchInput"
                  onChange={event => setSearch(event.target.value)}
                  placeholder="Write to search"
                  type="text"
                  value={search}
                />
                {search &&
                  <button
                    className="selectable-dropdown__searchIcon"
                    onClick={() => setSearch('')}
                    type="button"
                    >
                    &times;
                  </button>
                }
              </div>

              {options.map(option =>
                <button
                  className={classNames('selectable-dropdown__option', {
                    'selectable-dropdown__option--selected': value === option.value,
                  })}
                  key={option.value}
                  onClick={() => {
                    setValue(option.value)
                    setSearch('')
                  }}
                  type="button"
                  >
                  {getSearchMatches(option.label).map(term =>
                    term.match ? <b key={term.fromIndex}>{term.text}</b> : term.text
                  )}
                </button>
              )}
            </div>
            <div className="current-value">
              Current value: {value}
            </div>
          </div>
      }
    />

-
  description: Keyboard navigation.
  code: >
    <Selectable
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          focusedElement,
          getSearchMatches,
          options,
          search,
          setFocusedElement,
          setSearch,
          setValue,
          value,
        }) =>
          <div>
            <div
              className="selectable-dropdown"
              onMouseLeave={() => setFocusedElement(null)}
              >
              <div className="selectable-dropdown__searchWrapper">
                <input
                  className="selectable-dropdown__searchInput"
                  onChange={event => setSearch(event.target.value)}
                  onKeyDown={event => {
                    switch (event.key) {
                      case 'ArrowDown':
                        event.preventDefault()
                        setFocusedElement(focusedElement === null ? 0 : focusedElement + 1)
                        break

                      case 'ArrowUp':
                        event.preventDefault()
                        setFocusedElement(focusedElement === null ? 0 : focusedElement - 1)
                        break

                      case 'Enter':
                        event.preventDefault()
                        setValue(options[focusedElement].value)
                        setSearch('')
                        break
                    }
                  }}
                  placeholder="Write to search"
                  type="text"
                  value={search}
                />
                {search &&
                  <button
                    className="selectable-dropdown__searchIcon"
                    onClick={() => setSearch('')}
                    type="button"
                    >
                    &times;
                  </button>
                }
              </div>

              {options.map((option, index) =>
                <button
                  className={classNames('selectable-dropdown__option', {
                    'selectable-dropdown__option--selected': value === option.value,
                    'selectable-dropdown__option--focused': index === focusedElement,
                  })}
                  key={option.value}
                  onClick={() => {
                    setValue(option.value)
                    setSearch('')
                  }}
                  onMouseEnter={() => setFocusedElement(index)}
                  type="button"
                  >
                  {getSearchMatches(option.label).map(term =>
                    term.match ? <b key={term.fromIndex}>{term.text}</b> : term.text
                  )}
                </button>
              )}
            </div>
            <div className="current-value">
              Current value: {value}
            </div>
          </div>
      }
    />

-
  description: Inner scrolling area.
  code: >
    <Selectable
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          focusableRef,
          focusedElement,
          getSearchMatches,
          options,
          overflowRef,
          search,
          setFocusedElement,
          setSearch,
          setValue,
          value,
        }) =>
          <div>
            <div
              className="selectable-dropdown"
              onMouseLeave={() => setFocusedElement(null)}
              >
              <div className="selectable-dropdown__searchWrapper">
                <input
                  className="selectable-dropdown__searchInput"
                  onChange={event => setSearch(event.target.value)}
                  onKeyDown={event => {
                    switch (event.key) {
                      case 'ArrowDown':
                        event.preventDefault()
                        setFocusedElement(focusedElement === null ? 0 : focusedElement + 1, {
                          scrollToViewport: true,
                        })
                        break

                      case 'ArrowUp':
                        event.preventDefault()
                        setFocusedElement(focusedElement === null ? 0 : focusedElement - 1, {
                          scrollToViewport: true,
                        })
                        break

                      case 'Enter':
                        event.preventDefault()
                        setValue(options[focusedElement].value)
                        setSearch('')
                        break
                    }
                  }}
                  placeholder="Write to search"
                  type="text"
                  value={search}
                />
                {search &&
                  <button
                    className="selectable-dropdown__searchIcon"
                    onClick={() => setSearch('')}
                    type="button"
                    >
                    &times;
                  </button>
                }
              </div>

              <div
                className="selectable-dropdown__overflow"
                ref={overflowRef()}
                >
                {options.map((option, index) =>
                  <button
                    className={classNames('selectable-dropdown__option', {
                      'selectable-dropdown__option--selected': value === option.value,
                      'selectable-dropdown__option--focused': index === focusedElement,
                    })}
                    key={option.value}
                    onClick={() => {
                      setValue(option.value)
                      setSearch('')
                    }}
                    onMouseEnter={() => setFocusedElement(index)}
                    ref={focusableRef(index)}
                    type="button"
                    >
                    {getSearchMatches(option.label).map(term =>
                      term.match ? <b key={term.fromIndex}>{term.text}</b> : term.text
                    )}
                  </button>
                )}
              </div>
            </div>
            <div className="current-value">
              Current value: {value}
            </div>
          </div>
      }
    />

-
  description: Dropdown select using all available options.
  code: >
    <div>
      <Selectable
        options={[
          { label: 'Daniel Espinoza', value: 2 },
          { label: 'Víctor Sánchez', value: 5 },
          { label: 'Tamara Luque', value: 4 },
          { label: 'Abraham Barrera', value: 1 },
          { label: 'Rodrigo Díaz', value: 3 },
        ]}
        renderer={
          ({
            containerRef,      // Defines the container element to detect outside clicks
            focusableRef,      // Defines a focusable element
            focusedElement,    // The currently focused element
            getSearchMatches,  // Gets the current search matches for a given text
            isFocused,         // Specifies if the global control is focused or not
            options,           // Sorted and filtered options array
            overflowRef,       // Defines the inner list with overflow that contains the options
            search,            // The current search
            selectedOption,    // The currently selected option object
            setFocused,        // Changes the global control focus status
            setFocusedElement, // Changes the local focused element
            setSearch,         // Changes the current search
            setValue,          // Changes the current value
            value,             // The current value
          }) =>
            <div
              className={`
                e1-select
                ${value == null
                  ? 'e1-select--without-value'
                  : 'e1-select--with-value'
                }
              `}
              ref={containerRef()}
              >
              <button
                className="e1-control"
                onClick={() => setFocused(!isFocused)}
                type="button"
                >
                {selectedOption ? selectedOption.label : 'Select an option'}
              </button>

              {isFocused &&
                <div className="e1-dropdown">
                  <div className="e1-search-wrapper">
                    <input
                      autoFocus
                      className="e1-search"
                      onChange={event => setSearch(event.target.value)}
                      onKeyDown={event => {
                        switch (event.key) {
                          case 'ArrowDown':
                            event.preventDefault()
                            setFocusedElement(focusedElement === null ? 0 : focusedElement + 1, {
                              scrollToViewport: true,
                            })
                            break

                          case 'ArrowUp':
                            event.preventDefault()
                            setFocusedElement(focusedElement === null ? 0 : focusedElement - 1, {
                              scrollToViewport: true,
                            })
                            break

                          case 'Enter':
                            event.preventDefault()
                            setValue(options[focusedElement].value)
                            setFocused(false)
                            break
                        }
                      }}
                      placeholder="Write to search"
                      type="text"
                      value={search}
                    />

                    {search &&
                      <button
                        className="e1-clear-search"
                        onClick={() => setSearch('')}
                        type="button"
                        >
                        &times;
                      </button>
                    }
                  </div>

                  <div
                    className="e1-options-list"
                    ref={overflowRef()}
                    >
                    {options.length === 0 &&
                      <div className="e1-no-results">
                        No results
                      </div>
                    }

                    {options.map((option, index) =>
                      <button
                        key={option.value}
                        className={`
                          e1-option
                          ${option.value === value ? 'e1-option--selected' : ''}
                          ${index === focusedElement ? 'e1-option--focused' : ''}
                        `}
                        onClick={() => {
                          setValue(option.value)
                          setFocused(false)
                        }}
                        onMouseEnter={() => setFocusedElement(index)}
                        ref={focusableRef(index)}
                        type="button"
                        >
                        {getSearchMatches(option.label).map(term =>
                          term.match ? <b key={term.fromIndex}>{term.text}</b> : term.text
                        )}
                      </button>
                    )}
                  </div>
                  <button
                    className="e1-clear-option"
                    onClick={() => {
                      setValue(null)
                      setFocused(false)
                    }}
                    type="button"
                    >
                    Leave without value
                  </button>
                </div>
              }
            </div>
        }
      />

      <style
        dangerouslySetInnerHTML={{
          __html: `
            .e1-select {
              width: 240px;
              position: relative;
            }

            .e1-control {
              width: 100%;
              outline: none;
              border: #cdd4db solid 1px;
              outline: none;
              text-align: left;
              height: 32px;
              background-color: #fff;
              padding: 0 12px;
              position: relative;
              z-index: 1;
              margin: 0;
            }

            .e1-dropdown {
              position: absolute;
              right: 0;
              left: 0;
              z-index: 99999;
              background-color: #fff;
              background-clip: padding-box;
              box-shadow: rgba(0, 0, 0, 0.35) 0 8px 24px;
              border: rgba(0, 0, 0, 0.1) solid 1px;
              margin-top: -1px;
            }

            .e1-search-wrapper {
              display: flex;
              border-bottom: #cdd4db solid 1px;
            }

            .e1-search {
              flex: 1;
              height: 32px;
              padding: 0 12px;
              border: none;
            }

            .e1-clear-search {
              flex-shrink: 0;
            }

            .e1-no-results {
              padding: 16px;
            }

            .e1-options-list {
              max-height: 112px;
              overflow-y: auto;
            }

            .e1-option {
              height: 32px;
              width: 100%;
              background: none;
              border: none;
              outline: none;
              text-align: left;
              margin: 0;
              padding: 0 12px;
            }

            .e1-option--focused {
              background-color: #eee;
            }

            .e1-option--selected {
              background-color: #1e85f2;
              color: #fff;
            }

            .e1-clear-option {
              height: 40px;
              width: 100%;
              background: none;
              border: none;
              outline: none;
              text-align: left;
              margin: 0;
              padding: 0 12px;
              border-top: #E7EAED solid 1px;
              color: #B3BDC7;
            }

            .e1-select--without-value .e1-control {
              color: #B3BDC7;
            }
          `
        }}
      />
    </div>

-
  description: Inline multi-select
  code: >
    <div>
      <Selectable
        options={[
          { label: 'Daniel Espinoza', value: 2 },
          { label: 'Víctor Sánchez', value: 5 },
          { label: 'Tamara Luque', value: 4 },
          { label: 'Abraham Barrera', value: 1 },
          { label: 'Rodrigo Díaz', value: 3 },
        ]}
        renderer={
          ({
            focusedElement,
            getSearchMatches,
            options,
            search,
            selectedOption,
            setFocused,
            setFocusedElement,
            setSearch,
            setValue,
            value = [],
          }) =>
            <div className="e2-select">
              <div className="e2-search-wrapper">
                <input
                  className="e2-search"
                  onChange={event => setSearch(event.target.value)}
                  onKeyDown={event => {
                    switch (event.key) {
                      case 'ArrowDown':
                        event.preventDefault()
                        setFocusedElement(
                          focusedElement === null ? 0 : focusedElement + 1
                        )
                        break

                      case 'ArrowUp':
                        event.preventDefault()
                        setFocusedElement(
                          focusedElement === null ? 0 : focusedElement - 1
                        )
                        break

                      case 'Enter':
                        event.preventDefault()
                        const option = options[focusedElement]
                        const index = value.indexOf(option.value)

                        if (index === -1) {
                          setValue([
                            ...value,
                            option.value,
                          ])
                        }
                        else {
                          setValue([
                            ...value.slice(0, index),
                            ...value.slice(index + 1),
                          ])
                        }

                        break
                    }
                  }}
                  placeholder="Write to search"
                  type="text"
                  value={search}
                />

                {search &&
                  <button
                    className="e2-clear-search"
                    onClick={() => setSearch('')}
                    type="button"
                    >
                    &times;
                  </button>
                }
              </div>

              <label
                className={`
                  e2-option
                  e2-option--all
                  ${focusedElement === 'select-all' ? 'e2-option--focused' : ''}
                `}
                type="button"
                >
                <input
                  checked={value.length === options.length}
                  onChange={event => {
                    if (event.target.checked) {
                      setValue(options.map(option => option.value))
                    }
                    else {
                      setValue([])
                    }
                  }}
                  type="checkbox"
                />
                Select all
              </label>

              <div
                className="e2-options-list"
                onMouseLeave={() => setFocusedElement(null)}
                >
                {options.length === 0 &&
                  <div className="e2-no-results">
                    No results
                  </div>
                }
                {options.map((option, index) =>
                  <label
                    key={option.value}
                    className={`
                      e2-option
                      ${index === focusedElement ? 'e2-option--focused' : ''}
                    `}
                    onMouseEnter={() => setFocusedElement(index)}
                    type="button"
                    >
                    <input
                      checked={value.indexOf(option.value) !== -1}
                      onChange={() => {
                        const index = value.indexOf(option.value)

                        if (index === -1) {
                          setValue([
                            ...value,
                            option.value,
                          ])
                        }
                        else {
                          setValue([
                            ...value.slice(0, index),
                            ...value.slice(index + 1),
                          ])
                        }
                      }}
                      type="checkbox"
                    />
                    <div>
                      {getSearchMatches(option.label).map(term =>
                        term.match ? <b key={term.fromIndex}>{term.text}</b> : term.text
                      )}
                    </div>
                  </label>
                )}
              </div>
            </div>
        }
      />

      <style
        dangerouslySetInnerHTML={{
          __html: `
            .e2-select {
              width: 240px;
              background-color: #fff;
            }

            .e2-search-wrapper {
              display: flex;
              padding: 8px 8px 4px 8px;
            }

            .e2-search {
              flex: 1;
              height: 32px;
              padding: 0 12px;
              border: none;
              background-color: #EEF1F3;
              border-radius: 16px;
            }

            .e2-search::placeholder {
              color: #A7B3BE;
            }

            .e2-clear-search {
              flex-shrink: 0;
            }

            .e2-no-results {
              padding: 16px;
            }

            .e2-options-list {
              border-top: #cdd4db solid 1px;
            }

            .e2-option {
              height: 32px;
              width: 100%;
              background: none;
              border: none;
              outline: none;
              text-align: left;
              margin: 0;
              padding: 0 12px;
              display: flex;
              align-items: center;
            }

            .e2-option input {
              margin-right: 8px;
            }

            .e2-option--focused {
              background-color: #eee;
            }

            .e2-option--selected {
              background-color: #1e85f2;
              color: #fff;
            }

            .e2-clear-option {
              height: 40px;
              width: 100%;
              background: none;
              border: none;
              outline: none;
              text-align: left;
              margin: 0;
              padding: 0 12px;
              border-top: #E7EAED solid 1px;
              color: #B3BDC7;
            }

            .e2-select--without-value .e2-control {
              color: #B3BDC7;
            }
          `
        }}
      />
    </div>
