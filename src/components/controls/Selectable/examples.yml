-
  description: |
    A simple selectable options list. It uses these minimum arguments:

    - `getOptionProps(option, otherProps = {})`: Get props for an option.
    - `options`: Sorted options array.
    - `value`: The current value.

    Its important to note that both `getContainerProps` and `getOptionProps` allows to
    declare additional props for the component without worrying about overriding core
    props declared by Selectable.

  code: >
    <Selectable
      onChange={console.log}
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          getOptionProps,
          options,
          value,
        }) =>
          <div className="selectable-dropdown">
            {options.map(option =>
              <button
                {...getOptionProps(option, {
                  className: classNames('selectable-dropdown__option', {
                    'selectable-dropdown__option--selected': value === option.value,
                  }),
                  type: 'button',
                })}
                >
                {option.label}
              </button>
            )}
          </div>
      }
    />

-
  description: |
    Adds a search input using:

    - `getSearchMatches(text)`: Returns a match analysis between the text and the current search.
      Useful for highlighting.
    - `search`: The current search.
    - `setSearch(search)`: Changes the current search. `options` will be automatically filtered.

  code: >
    <Selectable
      onChange={console.log}
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          getOptionProps,
          getSearchMatches,
          options,
          search,
          setSearch,
          value,
        }) =>
          <div className="selectable-dropdown">
            <div className="selectable-dropdown__searchWrapper">
              <input
                className="selectable-dropdown__searchInput"
                onChange={event => setSearch(event.target.value)}
                placeholder="Write to search"
                type="text"
                value={search}
              />
              {search &&
                <button
                  className="selectable-dropdown__searchIcon"
                  onClick={() => setSearch('')}
                  type="button"
                  >
                  &times;
                </button>
              }
            </div>

            {options.map(option =>
              <button
                {...getOptionProps(option, {
                  className: classNames('selectable-dropdown__option', {
                    'selectable-dropdown__option--selected': value === option.value,
                  }),
                  type: 'button',
                })}
                >
                <div>
                  {getSearchMatches(option.label).map(term =>
                    term.match ? <b key={term.fromIndex}>{term.text}</b> : term.text
                  )}
                </div>
              </button>
            )}
          </div>
      }
    />

-
  description: |
    Having a list with a search input is common pattern, so it's already built into Selectable:

    - `getInputProps(otherProps = {})`: Keeps the current search in sync with the input and
      allows to navigate options with the keyboard, using the arrow down, arrow up and enter
      keys.
    - `getClearInputProps(otherProps = {})`: Resets the search and gives the focus back to
      the search input.

    We are also taking advantaje of the virtual focusing that's automatically handled. All we
    need to do is add a class for the option that's currently focused:

    - `focusedElement`: The current focused element `id`. For options this is the index.

  code: >
    <Selectable
      onChange={console.log}
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          focusedElement,
          getClearInputProps,
          getInputProps,
          getOptionProps,
          getSearchMatches,
          options,
          search,
          value,
        }) =>
          <div className="selectable-dropdown">
            <div className="selectable-dropdown__searchWrapper">
              <input
                {...getInputProps({
                  className: 'selectable-dropdown__searchInput',
                  placeholder: 'Write to search',
                  type: 'text',
                })}
              />
              {search &&
                <button
                  {...getClearInputProps({
                    className: 'selectable-dropdown__searchIcon',
                    type: 'button',
                  })}
                  >
                  &times;
                </button>
              }
            </div>

            {options.map((option, index) =>
              <button
                {...getOptionProps(option, {
                  className: classNames('selectable-dropdown__option', {
                    'selectable-dropdown__option--selected': value === option.value,
                    'selectable-dropdown__option--focused': index === focusedElement,
                  }),
                  type: 'button',
                })}
                >
                <div>
                  {getSearchMatches(option.label).map(term =>
                    term.match ? <b key={term.fromIndex}>{term.text}</b> : term.text
                  )}
                </div>
              </button>
            )}
          </div>
      }
    />
