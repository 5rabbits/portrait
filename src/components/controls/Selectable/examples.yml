-
  description: |
    A simple selectable options list. It uses these minimum arguments:

    - `getOptionProps(option, otherProps = {})`: Get props for an option.
    - `options`: Sorted options array.
    - `value`: The current value.

    Its important to note that both `getContainerProps` and `getOptionProps` allows to
    declare additional props for the component without worrying about overriding core
    props declared by Selectable.

  code: >
    <Selectable
      onChange={console.log}
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          getOptionProps,
          options,
          value,
        }) =>
          <div className="selectable-dropdown">
            {options.map(option =>
              <button
                {...getOptionProps(option, {
                  className: classNames('selectable-dropdown__option', {
                    'selectable-dropdown__option--selected': value === option.value,
                  }),
                  type: 'button',
                })}
                >
                {option.label}
              </button>
            )}
          </div>
      }
    />

-
  description: |
    Adds a search input using:

    - `getSearchMatches(text)`: Returns a match analysis between the text and the current search.
      Useful for highlighting.
    - `search`: The current search.
    - `setSearch(search)`: Changes the current search. `options` will be automatically filtered.

  code: >
    <Selectable
      onChange={console.log}
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          getOptionProps,
          getSearchMatches,
          options,
          search,
          setSearch,
          value,
        }) =>
          <div className="selectable-dropdown">
            <div className="selectable-dropdown__searchWrapper">
              <input
                className="selectable-dropdown__searchInput"
                onChange={event => setSearch(event.target.value)}
                placeholder="Write to search"
                type="text"
                value={search}
              />
              {search &&
                <button
                  className="selectable-dropdown__searchIcon"
                  onClick={() => setSearch('')}
                  type="button"
                  >
                  &times;
                </button>
              }
            </div>

            {options.map(option =>
              <button
                {...getOptionProps(option, {
                  className: classNames('selectable-dropdown__option', {
                    'selectable-dropdown__option--selected': value === option.value,
                  }),
                  type: 'button',
                })}
                >
                <div>
                  {getSearchMatches(option.label).map(term =>
                    term.match ? <b key={term.fromIndex}>{term.text}</b> : term.text
                  )}
                </div>
              </button>
            )}
          </div>
      }
    />

-
  description: |
    Adds keyboard navigation:

    - `focusableRef(id)`: Registers a focusable element. Options are automatically registered
      using `getOptionProps`, based on the option index. Pass `null` to remove the focus.
    - `focusedElement`: The current focused element `id`.
    - `setFocusedElement(id, { virtual: true })`: Changes the focused element. Is important to note
      that this is a _virtual focus_ by default, useful to give a visual feedback while keeping the
      real focus on a text input (for searching, autocomplete, etc) or any other element.

      Pass `{ virtual: false }` to attempt a real dom focus.

      `getOptionProps` highlights the option on mouse enter by default.

  code: >
    <Selectable
      onChange={console.log}
      options={[
        { label: 'Daniel Espinoza', value: 2 },
        { label: 'Víctor Sánchez', value: 5 },
        { label: 'Tamara Luque', value: 4 },
        { label: 'Abraham Barrera', value: 1 },
        { label: 'Rodrigo Díaz', value: 3 },
      ]}
      renderer={
        ({
          focusableRef,
          focusedElement,
          getOptionProps,
          getSearchMatches,
          options,
          search,
          setFocusedElement,
          setSearch,
          setValue,
          value,
        }) =>
          <div
            className="selectable-dropdown"
            onMouseLeave={() => setFocusedElement(null)}
            >
            <div className="selectable-dropdown__searchWrapper">
              <input
                className="selectable-dropdown__searchInput"
                onChange={event => setSearch(event.target.value)}
                onKeyDown={event => {
                  switch (event.key) {
                    case 'ArrowDown':
                      event.preventDefault()
                      setFocusedElement(focusedElement === null ? 0 : focusedElement + 1)
                      break

                    case 'ArrowUp':
                      event.preventDefault()
                      setFocusedElement(focusedElement === null ? 0 : focusedElement - 1)
                      break

                    case 'Enter':
                      event.preventDefault()
                      setValue(options[focusedElement].value)
                      setSearch('')
                      break
                  }
                }}
                placeholder="Write to search"
                ref={focusableRef('input')}
                type="text"
                value={search}
              />
              {search &&
                <button
                  className="selectable-dropdown__searchIcon"
                  onClick={() => {
                    setSearch('')
                    setFocusedElement('input', { virtual: false })
                  }}
                  type="button"
                  >
                  &times;
                </button>
              }
            </div>

            {options.map((option, index) =>
              <button
                {...getOptionProps(option, {
                  className: classNames('selectable-dropdown__option', {
                    'selectable-dropdown__option--selected': value === option.value,
                    'selectable-dropdown__option--focused': index === focusedElement,
                  }),
                  type: 'button',
                })}
                >
                <div>
                  {getSearchMatches(option.label).map(term =>
                    term.match ? <b key={term.fromIndex}>{term.text}</b> : term.text
                  )}
                </div>
              </button>
            )}
          </div>
      }
    />
